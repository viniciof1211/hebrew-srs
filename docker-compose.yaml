version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks: [app-network]

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports: ['9092:9092']
    networks: [app-network]

  debezium:
    image: debezium/connect:latest
    depends_on: [kafka, db]
    environment:
      BOOTSTRAP_SERVERS: 'kafka:9092'
      GROUP_ID: '1'
      CONFIG_STORAGE_TOPIC: 'my_connect_configs'
      OFFSET_STORAGE_TOPIC: 'my_connect_offsets'
      STATUS_STORAGE_TOPIC: 'my_connect_statuses'
    ports: ['8083:8083']
    networks: [app-network]

  mongodb:
    image: mongo:6.0
    container_name: hebrew-srs-mongo
    ports:
      - '27017:27017'
    networks: [app-network]
    
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vocab_trainer
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    depends_on:
      - db
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/vocab_trainer
      SECRET_KEY: "YOUR_SECRET_KEY"
    ports:
      - "8001:8000"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    depends_on:
      - api
    ports:
      - "8000:80"
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge